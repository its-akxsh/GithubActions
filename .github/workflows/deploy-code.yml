# name: Deploy to Salesforce (PR to main)

# on:
#   pull_request:
#     branches:
#       - main
#     types: [opened, synchronize, reopened] # Triggers on PR creation, update, or re-open

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v3
        
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'  # Specify the Node.js version you're using

#       # - name: Install Salesforce CLI
#       #   run: |
#       #     wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
#       #     tar xJf sfdx-linux-amd64.tar.xz
#       #     ./sfdx/install
#       #     sudo ln -s $(pwd)/sfdx/bin/sfdx /usr/local/bin/sfdx

#       - name: Install Salesforce CLI via npm
#         run: |
#           npm install --global sfdx-cli

#       - name: Authenticate to Salesforce Org (JWT Flow)
#         run: |
#           echo ${{ secrets.SALESFORCE_CLIENT_ID }} > client_id.txt
#           echo ${{ secrets.SALESFORCE_PRIVATE_KEY }} > private_key.key
#           echo ${{ secrets.SALESFORCE_USER_IDENTIFIER }} > user_identifier.txt
#           echo ${{ secrets.SALESFORCE_API_URL }} > api_url.txt
          
#           # Use JWT Flow to authenticate
#           sfdx force:auth:jwt:grant --clientid $(<client_id.txt) --privatekeyfile private_key.key --username $(<user_identifier.txt) --instanceurl $(<api_url.txt) --setalias my-org
#         env:
#           SALESFORCE_CLIENT_ID: ${{ secrets.CLIENT_ID }}
#           SALESFORCE_PRIVATE_KEY: ${{ secrets.SERVER_KEY }}
#           SALESFORCE_USER_IDENTIFIER: ${{ secrets.USERNAME }}
#           SALESFORCE_API_URL: ${{ vars.INSTANCE_URL }}

#       - name: Retrieve the latest metadata from the org #(Optional: If you want to fetch before deployment)
#         run: sfdx force:source:retrieve -u my-org -m ApexClass,ApexTrigger,CustomObject

#       - name: Deploy to Salesforce
#         run: |
#           sfdx force:source:deploy -p force-app/main/default --checkonly --testlevel RunLocalTests -u my-org --json --loglevel fatal
#         # Remove --checkonly for actual deployment

#       - name: Post Deployment - Notify Success (Optional)
#         if: success()
#         run: echo "Salesforce Deployment Succeeded!"
      
#       - name: Post Deployment - Notify Failure (Optional)
#         if: failure()
#         run: echo "Salesforce Deployment Failed!"



name: Salesforce CI - Validate Metadata

on:
  push:
    branches:
      - main # Or your main development branch e.g., 'develop'
    paths:
      - 'force-app/**' # Only run if Salesforce metadata changes
  pull_request:
    branches:
      - main # Or your main development branch e.g., 'develop'
    paths:
      - 'force-app/**'

jobs:
  validate-on-dev-org:
    name: Validate Deployment to Dev Org
    runs-on: ubuntu-latest
    # environment: Development # Optional: if you configure GitHub Environments

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Uses the latest version of the checkout action

      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global
          sf --version

     # ... (previous steps: Checkout, Install Salesforce CLI) ...

      - name: Populate SFDC Server Key for JWT
        run: |
          set -e
          echo "${{ secrets.SERVER_KEY }}" > server.key

      - name: Authenticate to Dev Org using JWT (sf command)
        run: |
          set -e
          sf auth jwt grant \
            --client-id ${{ secrets.CLIENT_ID }} \
            --jwt-key-file server.key \
            --username ${{ secrets.USERNAME }} \
            --instance-url ${{ vars.INSTANCE_URL }} \
            --alias helloAction
          echo "sf auth jwt grant command executed."

      - name: List SFDX Orgs and Verify Alias
        run: |
          set -e
          echo "Listing all SFDX/sf orgs to check if alias was registered:"
          sf list org 
        # sf org list works similar to sfdx org list
        # You can also use: sfdx org list --all (as sf usually includes sfdx compatibility)

      - name: Validate Deploy to Dev Org (Check Only)
        run: |
          set -e
          echo "Attempting to validate metadata from force-app..." 
          sf project deploy start \
              --source-dir force-app \
              --target-org helloAction \
              --test-level RunLocalTest \
              --verbose

      - name: Clean up SFDC Server Key
        if: always()
        run: |
          rm -f server.key
          echo "Server key file removed."
